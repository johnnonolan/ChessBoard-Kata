// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace ChessBoard.Specifications.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Moving the Knight.")]
    public partial class MovingTheKnight_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MovingTheKnight.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Moving the Knight.", "In order to play chess\r\nAs a Player\r\nI want to move the Knight legally.", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Moving the knight legally")]
        public virtual void MovingTheKnightLegally()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Moving the knight legally", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("I have a Black Knight at D4");
#line 8
testRunner.And("I have a White Pawn at A1");
#line 9
testRunner.And("I move the Pawn to A2");
#line 10
testRunner.When("I move the Knight to F5");
#line 11
testRunner.Then("I should be shown \"Knight to F5\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Illegal Move")]
        [NUnit.Framework.TestCaseAttribute("A1")]
        [NUnit.Framework.TestCaseAttribute("A2")]
        [NUnit.Framework.TestCaseAttribute("A3")]
        [NUnit.Framework.TestCaseAttribute("A4")]
        [NUnit.Framework.TestCaseAttribute("A5")]
        [NUnit.Framework.TestCaseAttribute("A6")]
        [NUnit.Framework.TestCaseAttribute("A7")]
        [NUnit.Framework.TestCaseAttribute("A8")]
        [NUnit.Framework.TestCaseAttribute("B1")]
        [NUnit.Framework.TestCaseAttribute("B2")]
        [NUnit.Framework.TestCaseAttribute("B4")]
        [NUnit.Framework.TestCaseAttribute("B6")]
        [NUnit.Framework.TestCaseAttribute("B7")]
        [NUnit.Framework.TestCaseAttribute("B8")]
        [NUnit.Framework.TestCaseAttribute("C1")]
        [NUnit.Framework.TestCaseAttribute("C3")]
        [NUnit.Framework.TestCaseAttribute("C4")]
        [NUnit.Framework.TestCaseAttribute("C5")]
        [NUnit.Framework.TestCaseAttribute("C7")]
        [NUnit.Framework.TestCaseAttribute("C8")]
        [NUnit.Framework.TestCaseAttribute("D1")]
        [NUnit.Framework.TestCaseAttribute("D2")]
        [NUnit.Framework.TestCaseAttribute("D3")]
        [NUnit.Framework.TestCaseAttribute("D4")]
        [NUnit.Framework.TestCaseAttribute("D5")]
        [NUnit.Framework.TestCaseAttribute("D6")]
        [NUnit.Framework.TestCaseAttribute("D7")]
        [NUnit.Framework.TestCaseAttribute("D8")]
        [NUnit.Framework.TestCaseAttribute("E1")]
        [NUnit.Framework.TestCaseAttribute("E3")]
        [NUnit.Framework.TestCaseAttribute("E4")]
        [NUnit.Framework.TestCaseAttribute("E5")]
        [NUnit.Framework.TestCaseAttribute("E7")]
        [NUnit.Framework.TestCaseAttribute("E8")]
        [NUnit.Framework.TestCaseAttribute("F1")]
        [NUnit.Framework.TestCaseAttribute("F2")]
        [NUnit.Framework.TestCaseAttribute("F4")]
        [NUnit.Framework.TestCaseAttribute("F6")]
        [NUnit.Framework.TestCaseAttribute("F7")]
        [NUnit.Framework.TestCaseAttribute("F8")]
        [NUnit.Framework.TestCaseAttribute("G1")]
        [NUnit.Framework.TestCaseAttribute("G2")]
        [NUnit.Framework.TestCaseAttribute("G3")]
        [NUnit.Framework.TestCaseAttribute("G4")]
        [NUnit.Framework.TestCaseAttribute("G5")]
        [NUnit.Framework.TestCaseAttribute("G6")]
        [NUnit.Framework.TestCaseAttribute("G7")]
        [NUnit.Framework.TestCaseAttribute("G8")]
        [NUnit.Framework.TestCaseAttribute("H1")]
        [NUnit.Framework.TestCaseAttribute("H2")]
        [NUnit.Framework.TestCaseAttribute("H3")]
        [NUnit.Framework.TestCaseAttribute("H4")]
        [NUnit.Framework.TestCaseAttribute("H5")]
        [NUnit.Framework.TestCaseAttribute("H6")]
        [NUnit.Framework.TestCaseAttribute("H7")]
        [NUnit.Framework.TestCaseAttribute("H8")]
        public virtual void IllegalMove(string position)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Illegal Move", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
testRunner.Given("I have a Black Knight at D4");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "move"});
            table1.AddRow(new string[] {
                        "B3"});
            table1.AddRow(new string[] {
                        "B5"});
            table1.AddRow(new string[] {
                        "C2"});
            table1.AddRow(new string[] {
                        "C6"});
            table1.AddRow(new string[] {
                        "E2"});
            table1.AddRow(new string[] {
                        "E6"});
            table1.AddRow(new string[] {
                        "F3"});
            table1.AddRow(new string[] {
                        "F5"});
#line 16
testRunner.And("the valid moves are", ((string)(null)), table1);
#line 26
testRunner.And("I have a White Pawn at A1");
#line 27
testRunner.And("I move the Pawn to A2");
#line 28
testRunner.When(string.Format("I move the Knight to {0}", position));
#line 29
testRunner.Then("I should be shown \"Illegal Move\"");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
