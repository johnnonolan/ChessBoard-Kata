// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Chess.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Moving the Pawn.")]
    public partial class MovingThePawn_Feature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "PawnMovesLegally.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Moving the Pawn.", "In order to play chess\r\nAs a Player\r\nI want to move the Pawn legally.", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("White Pawn Starts on home row.")]
        public virtual void WhitePawnStartsOnHomeRow_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("White Pawn Starts on home row.", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("the game has just started");
#line 8
testRunner.And("I have a White Pawn on B2");
#line 9
testRunner.And("I have a Black Knight on G8");
#line 10
testRunner.When("I move the White Pawn to B3");
#line 11
testRunner.Then("I should be shown \'White Pawn to B3\'");
#line 12
testRunner.And("White Pawn should be at B3");
#line 14
testRunner.Given("the game has just started");
#line 15
testRunner.And("the White Pawn is on E2");
#line 16
testRunner.And("the Black Knight is at G8");
#line 17
testRunner.When("I move the White Pawn to E4");
#line 18
testRunner.Then("I should be shown \'White Pawn to E4\'");
#line 19
testRunner.And("White Pawn should be at E4");
#line 21
testRunner.Given("the game has just started");
#line 22
testRunner.And("the White Pawn is on D2");
#line 23
testRunner.And("the Black Knight is at G8");
#line 24
testRunner.When("I move the White Pawn to D4");
#line 25
testRunner.Then("I should be shown \'Pawn cannot move 2 spaces unless it in the first round and is " +
                    "on the home row\'");
#line 26
testRunner.And("White Pawn should be at D2");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pawn tries taking move when nothing to capture")]
        public virtual void PawnTriesTakingMoveWhenNothingToCapture()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pawn tries taking move when nothing to capture", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
testRunner.Given("I have a White Pawn at D7");
#line 30
testRunner.And("I have a Black Knight at G8");
#line 31
testRunner.When("I move the White Pawn to C8");
#line 32
testRunner.Then("I should be shown \'Pawn cannot move diagonally unless it is capturing a piece\'");
#line 33
testRunner.And("White Pawn should be at D7");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Pawn moves illegally")]
        [NUnit.Framework.TestCaseAttribute("A1")]
        [NUnit.Framework.TestCaseAttribute("A2")]
        [NUnit.Framework.TestCaseAttribute("A3")]
        [NUnit.Framework.TestCaseAttribute("A4")]
        [NUnit.Framework.TestCaseAttribute("A5")]
        [NUnit.Framework.TestCaseAttribute("A6")]
        [NUnit.Framework.TestCaseAttribute("A7")]
        [NUnit.Framework.TestCaseAttribute("A8")]
        [NUnit.Framework.TestCaseAttribute("B1")]
        [NUnit.Framework.TestCaseAttribute("B2")]
        [NUnit.Framework.TestCaseAttribute("B3")]
        [NUnit.Framework.TestCaseAttribute("B4")]
        [NUnit.Framework.TestCaseAttribute("B5")]
        [NUnit.Framework.TestCaseAttribute("B6")]
        [NUnit.Framework.TestCaseAttribute("B7")]
        [NUnit.Framework.TestCaseAttribute("B8")]
        [NUnit.Framework.TestCaseAttribute("C1")]
        [NUnit.Framework.TestCaseAttribute("C2")]
        [NUnit.Framework.TestCaseAttribute("C3")]
        [NUnit.Framework.TestCaseAttribute("C4")]
        [NUnit.Framework.TestCaseAttribute("C5")]
        [NUnit.Framework.TestCaseAttribute("C6")]
        [NUnit.Framework.TestCaseAttribute("C7")]
        [NUnit.Framework.TestCaseAttribute("C8")]
        [NUnit.Framework.TestCaseAttribute("D1")]
        [NUnit.Framework.TestCaseAttribute("D2")]
        [NUnit.Framework.TestCaseAttribute("D3")]
        [NUnit.Framework.TestCaseAttribute("D4")]
        [NUnit.Framework.TestCaseAttribute("D5")]
        [NUnit.Framework.TestCaseAttribute("D6")]
        [NUnit.Framework.TestCaseAttribute("D7")]
        [NUnit.Framework.TestCaseAttribute("E1")]
        [NUnit.Framework.TestCaseAttribute("E2")]
        [NUnit.Framework.TestCaseAttribute("E3")]
        [NUnit.Framework.TestCaseAttribute("E4")]
        [NUnit.Framework.TestCaseAttribute("E5")]
        [NUnit.Framework.TestCaseAttribute("E7")]
        [NUnit.Framework.TestCaseAttribute("E8")]
        [NUnit.Framework.TestCaseAttribute("F1")]
        [NUnit.Framework.TestCaseAttribute("F2")]
        [NUnit.Framework.TestCaseAttribute("F3")]
        [NUnit.Framework.TestCaseAttribute("F4")]
        [NUnit.Framework.TestCaseAttribute("F5")]
        [NUnit.Framework.TestCaseAttribute("F6")]
        [NUnit.Framework.TestCaseAttribute("F7")]
        [NUnit.Framework.TestCaseAttribute("F8")]
        [NUnit.Framework.TestCaseAttribute("G1")]
        [NUnit.Framework.TestCaseAttribute("G2")]
        [NUnit.Framework.TestCaseAttribute("G3")]
        [NUnit.Framework.TestCaseAttribute("G4")]
        [NUnit.Framework.TestCaseAttribute("G5")]
        [NUnit.Framework.TestCaseAttribute("G6")]
        [NUnit.Framework.TestCaseAttribute("G7")]
        [NUnit.Framework.TestCaseAttribute("G8")]
        [NUnit.Framework.TestCaseAttribute("H1")]
        [NUnit.Framework.TestCaseAttribute("H2")]
        [NUnit.Framework.TestCaseAttribute("H3")]
        [NUnit.Framework.TestCaseAttribute("H4")]
        [NUnit.Framework.TestCaseAttribute("H5")]
        [NUnit.Framework.TestCaseAttribute("H6")]
        [NUnit.Framework.TestCaseAttribute("H7")]
        [NUnit.Framework.TestCaseAttribute("H8")]
        public virtual void PawnMovesIllegally(string position)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Pawn moves illegally", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
testRunner.Given("I have a White Pawn at D7");
#line 37
testRunner.And("I have a Black Knight at G8");
#line 38
testRunner.And("the valid moves are D8");
#line 39
testRunner.When(string.Format("I move the White Pawn to {0}", position));
#line 40
testRunner.Then("I should be shown \'illegal move\'");
#line 41
testRunner.And("White Pawn should be at D7");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
